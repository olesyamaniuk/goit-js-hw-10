{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// console.log('timer');\n\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst startButton = document.querySelector('[data-start]');\nconst input = document.querySelector('#datetime-picker');\nconst clock = document.querySelectorAll('.value');\n\nlet userSelectedDate = null;\nlet timerInterval;\n\nfunction updateTime() {\n    const currentDate = new Date();\n    const timeDiff = userSelectedDate - currentDate;\n\n    if (timeDiff <= 0) {\n        clearInterval(timerInterval);\n        clock.forEach(div => div.textContent = '00');\n        return;\n    }\n\n    const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);\n\n    clock[0].textContent = days.toString().padStart(2, '0');\n    clock[1].textContent = hours.toString().padStart(2, '0');\n    clock[2].textContent = minutes.toString().padStart(2, '0');\n    clock[3].textContent = seconds.toString().padStart(2, '0');\n}\n\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        userSelectedDate = new Date(selectedDates[0]);\n        validateSelectedDate();\n    },\n};\nconst userTime = flatpickr(\"#datetime-picker\", options);\n\nstartButton.disabled = true;\nfunction validateSelectedDate() {\n    const currentDate = new Date();\n    \n    if (userSelectedDate <= currentDate) {\n        iziToast.error({\n            title: 'Error',\n            message: 'Please choose a date in the future',\n            closeOnEscape: true,\n            position: 'center',\n        });\n        startButton.disabled = true;\n    } else {\n        startButton.disabled = false;\n    }\n}\n\nclass Timer {\n    start() {\n        timerInterval = setInterval(updateTime, 1000);\n        startButton.disabled = true;\n        input.disabled = true;\n    }\n}\n\nconst timer = new Timer();\n\nstartButton.addEventListener('click', () => {\n    \n    timer.start();\n});"],"names":["startButton","input","clock","userSelectedDate","timerInterval","updateTime","timeDiff","div","days","hours","minutes","seconds","options","selectedDates","validateSelectedDate","flatpickr","iziToast","Timer","timer"],"mappings":"+IAQA,MAAMA,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAQ,SAAS,iBAAiB,QAAQ,EAEhD,IAAIC,EAAmB,KACnBC,EAEJ,SAASC,GAAa,CAElB,MAAMC,EAAWH,EADG,IAAI,KAGxB,GAAIG,GAAY,EAAG,CACf,cAAcF,CAAa,EAC3BF,EAAM,QAAQK,GAAOA,EAAI,YAAc,IAAI,EAC3C,MACH,CAED,MAAMC,EAAO,KAAK,MAAMF,GAAY,IAAO,GAAK,GAAK,GAAG,EAClDG,EAAQ,KAAK,MAAOH,GAAY,IAAO,GAAK,GAAK,KAAQ,IAAO,GAAK,GAAG,EACxEI,EAAU,KAAK,MAAOJ,GAAY,IAAO,GAAK,KAAQ,IAAO,GAAG,EAChEK,EAAU,KAAK,MAAOL,GAAY,IAAO,IAAO,GAAI,EAE1DJ,EAAM,CAAC,EAAE,YAAcM,EAAK,SAAQ,EAAG,SAAS,EAAG,GAAG,EACtDN,EAAM,CAAC,EAAE,YAAcO,EAAM,SAAQ,EAAG,SAAS,EAAG,GAAG,EACvDP,EAAM,CAAC,EAAE,YAAcQ,EAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EACzDR,EAAM,CAAC,EAAE,YAAcS,EAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,CAC7D,CAGA,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnBV,EAAmB,IAAI,KAAKU,EAAc,CAAC,CAAC,EAC5CC,GACH,CACL,EACiBC,EAAU,mBAAoBH,CAAO,EAEtDZ,EAAY,SAAW,GACvB,SAASc,GAAuB,CAGxBX,GAFgB,IAAI,MAGpBa,EAAS,MAAM,CACX,MAAO,QACP,QAAS,qCACT,cAAe,GACf,SAAU,QACtB,CAAS,EACDhB,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE/B,CAEA,MAAMiB,CAAM,CACR,OAAQ,CACJb,EAAgB,YAAYC,EAAY,GAAI,EAC5CL,EAAY,SAAW,GACvBC,EAAM,SAAW,EACpB,CACL,CAEA,MAAMiB,EAAQ,IAAID,EAElBjB,EAAY,iBAAiB,QAAS,IAAM,CAExCkB,EAAM,MAAK,CACf,CAAC"}